# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: midi2mqtt-build

permissions:
  contents: write

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:
    runs-on: midi2mqtt-builder-linux
    env:
      SHORT_SHA: ${{ github.sha }}
    steps:
    - name: Install GitHub CLI
      run: |
        type -p curl >/dev/null || (apt update && apt install curl -y)
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt update
        sudo apt install gh -y
    
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23.4'

    - name: Build for linux-amd64
      run: GO111MODULE=on CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -o target/linux-amd64/midi2mqtt ./cmd/main.go
      
#    - name: Build for windows-amd64
#      run: GO111MODULE=on GOOS=windows GOARCH=amd64 go build -o target/windows-amd64/midi2mqtt ./cmd/main.go
#    - name: Build for windows-arm64
#      run: GO111MODULE=on GOOS=windows GOARCH=arm64 go build -o target/windows-arm64/midi2mqtt ./cmd/main.go
#    - name: Build for darwin-arm64
#      run: GO111MODULE=on GOOS=darwin GOARCH=arm64 go build -o target/darwin-arm64/midi2mqtt ./cmd/main.go
#    - name: Build for darwin-amd64
#      run: GO111MODULE=on GOOS=darwin GOARCH=amd64 go build -o target/darwin-amd64/midi2mqtt ./cmd/main.go

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries
        path: target/

    - name: Package Linux Binary
      run: |
        mkdir -p release/midi2mqtt-linux-amd64
        cp target/linux-amd64/midi2mqtt release/midi2mqtt-linux-amd64/
        cp midi2mqtt.yaml.template release/midi2mqtt-linux-amd64/midi2mqtt.yaml
        cd release
        tar czf "midi2mqtt-linux-amd64-latest.tar.gz" midi2mqtt-linux-amd64/

    - name: Create Prerelease
      uses: softprops/action-gh-release@v1
      with:
        files: release/midi2mqtt-linux-amd64-latest.tar.gz
        prerelease: true
        draft: false
        name: "Development Build"
        tag_name: "prerelease-new"
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Clean up old prerelease
      if: success()  # Only run if the new release was created successfully
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Delete old prerelease if it exists
        gh release delete "prerelease" --yes || true
        git push origin :refs/tags/prerelease || true
        # Rename new tag to be the permanent one
        git push origin refs/tags/prerelease-new:refs/tags/prerelease
        git push origin :refs/tags/prerelease-new
